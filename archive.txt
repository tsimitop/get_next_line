#include <stddef.h>
#include "get_next_line.h"
#include <stdio.h>

char	*read_line(char *line_const, int fd)
{
	char	*buffer;
	int		chars_read;

	chars_read = 1;
	buffer = ft_calloc(BUFFER_SIZE + 1, sizeof(char));
	if (!buffer)
	{
		if (ft_strlen(line_const) == 0)
			return (free(line_const), line_const = NULL, NULL);
		return (line_const);
	}
	while (line_const && (!ft_strchr(line_const, '\n')) && chars_read > 0)
	{
		chars_read = read(fd, buffer, BUFFER_SIZE);
		if (chars_read == -1)
			return (free(buffer), NULL);
		buffer[chars_read] = '\0';
		line_const = ft_strjoin(line_const, buffer);
	}
	free(buffer);
	return (line_const);
}

char	*return_line(char	*line_const)
{
	char	*output_line;
	int		i;

	i = 0;
	if (line_const && line_const[i] == '\0')
		return (NULL);
	while (line_const && line_const[i] != '\0' && line_const[i] != '\n')
		i++;
	if (line_const[i] == '\n')
		i++;
	output_line = ft_calloc(i + 1, sizeof(char));
	if (output_line == NULL)
	{
		if (!line_const[i])				// if (!line_const[i]) NULL CHECKS KO OR SEGFAULT
			return (NULL);
	}
	i = 0;
	while (line_const && line_const[i] != '\0' && line_const[i] != '\n')
	{
		output_line[i] = line_const[i];
		i++;
	}
	if (line_const[i] == '\n')
		output_line[i] = '\n';
	return (output_line);
}

char	*remaining_line(char *line_const)
{
	int		i;
	char	*remaining_chars;
	char	*new_startpoint;

	i = 0;
	if (!line_const)
		return (NULL);
	remaining_chars = 0;
	new_startpoint = ft_strchr(line_const, '\n');
	if (new_startpoint)
	{
		while (line_const && line_const[i] != '\n')
			i++;
		line_const[i] = '\0';
		if (line_const[i + 1] != 0)
			remaining_chars = ft_strdup(&line_const[i + 1]);
	}
	free(line_const);
	line_const = NULL;
	return (remaining_chars);
}

char	*get_next_line(int fd)
{
	static char	*line_const = NULL;
	char		*current_line;
	int			i;

	i = 0;
	if (fd < 0 || BUFFER_SIZE <= 0 || read(fd, 0, 0) < 0)
		return (free(line_const), line_const = NULL, NULL);
	if (line_const == NULL)
	{
		line_const = ft_calloc(1, sizeof(char));
		if (!line_const)
			return (NULL);
	}
	line_const = read_line(line_const, fd);
	if (!line_const)
		return (NULL);
	current_line = return_line(line_const);
	line_const = remaining_line(line_const);
	return (current_line);
}

char	*ft_strdup(char *s1)
{
	char	*ptr;
	size_t	i;
	size_t	len_s1cpy;

	if (!s1)
		return (NULL);
	len_s1cpy = ft_strlen(s1);
	i = 0;
	ptr = (char *)malloc(len_s1cpy + 1);
	if (!ptr)
		return (NULL);
	if (ptr)
	{
		while (len_s1cpy > i)
		{
			ptr[i] = s1[i];
			i++;
		}
		ptr[i] = '\0';
	}
	return (ptr);
}

#include "get_next_line.h"

size_t	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
		i++;
	return (i);
}

char	*ft_strchr(char *s, int c)
{
	int	i;

	i = 0;
	while (s[i] != '\0')
	{
		if (s[i] == (char)c)
		{
			return ((char *)&s[i]);
		}
		i++;
	}
	if ((char)c == '\0')
	{
		return ((char *)&s[i]);
	}
	return (NULL);
}

// Allocates (with malloc(3)) and returns a newstring, which is the result 
// of the concatenation of ’s1’ and ’s2’.
char	*ft_strjoin(char *s1, char *s2)
{
	char	*ptr;
	int		i;
	int		j;

	i = 0;
	j = 0;
	if (s1 == NULL || s2 == NULL)
		return (NULL);
	ptr = (char *)ft_calloc((ft_strlen(s1) + ft_strlen(s2)) + 1, sizeof(char));
	if (!ptr)
	{
		// if (ft_strlen(s1) == 0)
		// 	return (free(s1), NULL);
		return (s1);
	}
	while (s1[j] != '\0')
	{
		ptr[j] = s1[j];
		j++;
	}
	while (s2[i] != '\0')
		ptr[j++] = s2[i++];
	return (free(s1), ptr);
}

// The bzero() function writes n zeroed bytes to the string s.
void	ft_bzero(void *s, size_t n)
{
	size_t			i;
	unsigned char	*uc;

	i = 0;
	uc = s;
	while (i < n)
	{
		uc[i] = 0;
		i++;
	}
}

// The calloc() function allocates memory and initializes all bits to zero.
void	*ft_calloc(size_t count, size_t size)
{
	int	*ptr;

	if (size == 0 || count == 0)
		return (NULL);
	else
	{
		ptr = malloc(size * count);
		if (!ptr)
			return (NULL);
		ft_bzero(ptr, size * count);
		return (ptr);
	}
}
